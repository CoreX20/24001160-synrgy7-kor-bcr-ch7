openapi: 3.0.0
info:
  title: API Binar Rental Car
  description: API to manage Binar Rental Cars Application
  version: 1.0.0
servers:
  - url: http://localhost:3000/
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Toyota"
        price:
          type: number
          example: 400000
        image:
          type: string
          example: Toyota.jpg
        available:
          type: boolean
          example: true
        start_rent:
          type: string
          example: "2024-05-08"
        finish_rent:
          type: string
          example: "2024-05-10"
        created_by:
          type: string
          example: kornel
        updated_by:
          type: string
          example: null
        deleted_by:
          type: string
          example: null
        created_at:
          type: string
          example: 2024-06-01T13:50:14.317Z
        updated_at:
          type: string
          example: 2024-06-01T13:50:14.317Z
        deleted_at:
          type: string
          example: null

paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: superadmin@mail.com
                password:
                  type: string
                  example: "123456"
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: superadmin
                  email:
                    type: string
                    example: superadmin@mail.com
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJzxNTA4fQ.7BBRdkfpRJrxlPZfJEn_3kGlJ6tnHcDlrPvMoYjfkck
        "404":
          description: Failed login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Credentials

  /register:
    post:
      tags:
        - Auth
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: kornel
                email:
                  type: string
                  example: kornel@mail.com
                password:
                  type: string
                  example: kornel123
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: kornel
                  email:
                    type: string
                    example: kornel@mail.com
                  role:
                    type: string
                    example: member
        "404":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data tidak berhasil diinput!
  /user/whoami:
    get:
      tags:
        - User
      summary: Get current user from token
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: superadmin
                  email:
                    type: string
                    example: superadmin@mail.com
                  encryptedPassword:
                    type: string
                    example: $2a$10$32OZagJUoBUpvvu9KLLfGO9kic0mbNiP.0hOTZxw.rWSw7M.zlqY
                  role:
                    type: string
                    example: superadmin
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
  /user/add-admin:
    post:
      tags:
        - User
      summary: Add an admin
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John
                email:
                  type: string
                  example: john@mail.com
                password:
                  type: string
                  example: john123
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: Admin added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Admin berhasil ditambahkan!
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: John
                      email:
                        type: string
                        example: john@mail.com
                      encryptedPassword:
                        type: string
                        example: $2a$10$GuqbEm/QZ85GapxKeel2QO4FOHQLC2PWPYL3KnDC/
                      role:
                        type: string
                        example: admin
                      id:
                        type: integer
                        example: 5
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access Denied!

  /cars:
    get:
      tags:
        - Cars
      summary: Get list of cars
      responses:
        "200":
          description: List of cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  cars:
                    type: array
                    items:
                      $ref: "#/components/schemas/Car"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Gagal mendapatkan data!
  /cars/available:
    get:
      tags:
        - Cars
      summary: Get list of available cars
      responses:
        "200":
          description: List of available cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  cars:
                    type: array
                    items:
                      $ref: "#/components/schemas/Car"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Gagal mendapatkan data!

  /cars/create:
    post:
      tags:
        - Cars
      summary: Create a car
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Toyota
                price:
                  type: number
                  example: 400000
                available:
                  type: boolean
                  example: true
                start_rent:
                  type: string
                  example: 2024-05-08
                finish_rent:
                  type: string
                  example: 2024-05-10
                image:
                  type: string
                  format: binary
              required:
                - name
                - price
                - available
                - start_rent
                - finish_rent
                - image
      responses:
        "201":
          description: Car created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK!
                  message:
                    type: string
                    example: Data Berhasil Disimpan!
                  car:
                    $ref: "#/components/schemas/Car"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data Gagal Disimpan!
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access Denied!

  /cars/{id}:
    put:
      tags:
        - Cars
      summary: Update a car
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: ""
                price:
                  type: number
                  default: ""
                available:
                  type: boolean
                  default: ""
                start_rent:
                  type: string
                  format: date-time
                  default: ""
                finish_rent:
                  type: string
                  format: date-time
                  default: ""
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Car updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Data berhasil Diupdate!

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access Denied!
        "404":
          description: Car not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data not found!

    delete:
      tags:
        - Cars
      summary: Delete a car
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Car deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Data Berhasil Dihapus!
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid token
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access Denied!
        "404":
          description: Car not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data not found!
